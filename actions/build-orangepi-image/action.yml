name: 'OrangePI/build'
author: 'Stefan Dej'
description: 'Build orangepi-os images'
inputs:
  configfile:
    description: 'Config file name'
    required: true

runs:
  using: 'composite'
  steps:
    #- name: Runner prepare
    #  uses: ./actions/runner-prepare
    - name: Free Github Runner
      uses: descriptinc/free-disk-space@main
      with:
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true

    - name: Install Required Packages
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y aria2 gpg pv

    - name: Read configs
      id: config
      shell: bash
      run: |
        source ./build-configs/configs-orangepi/config-default.conf
        source ./build-configs/configs-orangepi/board-${{ inputs.configfile }}.conf
        
        echo "orangepi_repository=${ORANGEPI_REPOSITORY}" >> $GITHUB_OUTPUT
        echo "orangepi_branch=${ORANGEPI_BRANCH}" >> $GITHUB_OUTPUT

    - name: Checkout Custom Copy Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1
        repository: ${{ steps.config.outputs.orangepi_repository }}
        ref: ${{ steps.config.outputs.orangepi_branch }}
        path: build

    - name: Create config file
      shell: bash
      run: |
        mkdir -p ./build/userpatches
        cp ./build-configs/configs-orangepi/config-default.conf ./build/userpatches/config-settings.conf
        cat ./build-configs/configs-orangepi/board-${{ inputs.configfile }}.conf >> ./build/userpatches/config-settings.conf
        echo "::group::Output config-settings.conf"
        cat ./build/userpatches/config-settings.conf
        echo "::endgroup::"

    - name: Cache Toolchains
      id: cache-toolchains
      uses: actions/cache@v4
      with:
        path: build/toolchains
        key: orangepi-toolchains-${{ hashFiles('build/scripts/general.sh') }}

    - name: Download Toolchains
      if: steps.cache-toolchains.outputs.cache-hit != 'true'
      working-directory: ./build
      shell: bash
      run: |
        # Create toolchains directory
        mkdir -p toolchains
        cd toolchains
        
        # GPG Setup
        mkdir -p .gpg
        chmod 700 .gpg
        touch .gpg/gpg.conf
        chmod 600 .gpg/gpg.conf
        
        # Import GPG keys
        gpg --homedir .gpg --no-permission-warning --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 8F427EAF
        gpg --homedir .gpg --no-permission-warning --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 9F0E78D5
        
        TOOLCHAINS=($(awk '/^[[:space:]]*local toolchains=\(/,/\)/ {
          if ($0 ~ /".+"/) {
            gsub(/^[[:space:]]*"|"[[:space:]]*$/, "")
            print $0
          }
        }' ../scripts/general.sh))
        
        # Mirrors
        webseed() {
          local path=$1
          local text=""
          local MIRRORS=(
            "https://os.mainsail.xyz/_toolchain"
            "https://mirrors.tuna.tsinghua.edu.cn/armbian-releases/_toolchain"
            "https://mirrors.bfsu.edu.cn/armbian-releases/_toolchain"
          )
        
          if [[ "${path}" =~ ^/ky ]]; then
            MIRRORS=(
              "https://os.mainsail.xyz/_toolchain"
              "http://www.iplaystore.cn/"
            )
          fi
          
          for mirror in "${MIRRORS[@]}"; do
            text="${text} ${mirror}${path}"
          done
          echo "${text:1}"
        }
        
        # Download function with verification
        download_and_verify() {
          local file=$1
          local localdir="$PWD"
          local success=false
          
          # Try primary mirror first
          local primary_mirror="https://os.mainsail.xyz/_toolchain"
          
          # Check if .asc exists
          if ! timeout 10 curl --head --fail --silent "${primary_mirror}/${file}.asc"; then
            echo "No signature file found for $file"
            return 1
          fi
          
          # Download .asc file using aria2c
          echo "Downloading signature file for $file"
          aria2c --download-result=hide --disable-ipv6=true --summary-interval=0 \
            --console-log-level=error --auto-file-renaming=false \
            --continue=false --allow-overwrite=true \
            --dir="${localdir}" \
            "${primary_mirror}/${file}.asc" $(webseed "/${file}.asc") \
            -o "${file}.asc"
            
          if [ $? -ne 0 ]; then
            echo "Failed to download signature file for $file"
            return 1
          fi
          
          # Download main file using aria2c
          echo "Downloading $file"
          aria2c --download-result=hide --rpc-save-upload-metadata=false \
            --console-log-level=error --dht-file-path="${PWD}"/../cache/.aria2/dht.dat \
            --disable-ipv6=true --summary-interval=0 \
            --auto-file-renaming=false --allow-overwrite=true \
            --dir="${localdir}" \
            "${primary_mirror}/${file}" $(webseed "/${file}") \
            -o "${file}"
            
          if [ $? -ne 0 ]; then
            echo "Failed to download $file"
            return 1
          fi
        
          # create .complete file
          touch "${localdir}/${file}.complete"
          
          # Verify signature
          if [ -f "${file}.asc" ]; then
            if grep -q 'BEGIN PGP SIGNATURE' "${file}.asc"; then
              if gpg --homedir .gpg --no-permission-warning --verify \
                --trust-model always -q "${file}.asc" 2>/dev/null; then
                echo "GPG verification successful for $file"
                success=true
              fi
            else
              if md5sum -c --status "${file}.asc" 2>/dev/null; then
                echo "MD5 verification successful for $file"
                success=true
              fi
            fi
          fi
          
          if [ "$success" = true ]; then
            # Extract based on file extension
            if [[ "$file" == *.tar.xz ]]; then
              pv -p -b -r -c -N "[ Extracting ] $file" "$file" | xz -dc | tar xp --xattrs --no-same-owner --overwrite
            fi
            touch "${file//.tar.xz}/.download-complete"
            return 0
          else
            echo "Verification failed for $file"
            return 1
          fi
        }
        
        # Download and verify all toolchains
        for toolchain in "${TOOLCHAINS[@]}"; do
          download_and_verify "$toolchain" || {
            echo "Failed to process $toolchain"
            exit 1
          }
        done
        
        # Cleanup downloaded archives
        rm -f *.tar.* *.asc

    - name: Save Toolchains Cache
      if: steps.cache-toolchains.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: build/toolchains
        key: orangepi-toolchains-${{ hashFiles('build/scripts/general.sh') }}

    - name: Build Image
      shell: bash
      run: |
        cd ./build
        ./build.sh settings

    - name: Fix userrights
      shell: bash
      run: |
        WORKSPACE=$(echo ${{ github.workspace }})
        sudo chown -R $USER:$USER $WORKSPACE/build || true
        sudo chmod 0777 -R $WORKSPACE/build || true
        sudo df
